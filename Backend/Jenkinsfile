pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'charity-backend'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        SONAR_HOST = 'http://sonarqube:9000'
    }
    
    tools {
        maven 'Maven'
        jdk 'JDK 17'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                dir('Backend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                dir('Backend') {
                    sh 'mvn test'
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    dir('Backend') {
                        sh '''
                        mvn sonar:sonar \
                        -Dsonar.host.url=${SONAR_HOST} \
                        -Dsonar.projectKey=charity-backend \
                        -Dsonar.projectName='Charity Backend' \
                        -Dsonar.java.binaries=target/classes
                        '''
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('Backend') {
                    sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                    sh 'docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest'
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                dir('Backend') {
                    sh 'docker run --rm --network devops-network ${DOCKER_IMAGE}:${DOCKER_TAG} ./mvnw verify -Pintegration-test'
                }
            }
        }
        
        stage('Deploy') {
            steps {
                dir('Backend') {
                    sh 'docker-compose down backend || true'
                    sh 'docker-compose up -d backend'
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Build completed successfully!'
        }
        failure {
            echo 'Build failed!'
        }
    }
} 