pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'charity-frontend'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        SONAR_HOST = 'http://sonarqube:9000'
    }
    
    tools {
        nodejs 'NodeJS'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('Frontend') {
                    sh 'npm ci'
                }
            }
        }
        
        stage('Lint') {
            steps {
                dir('Frontend') {
                    sh 'npm run lint'
                }
            }
        }
        
        stage('Build') {
            steps {
                dir('Frontend') {
                    sh 'npm run build -- --configuration production'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                dir('Frontend') {
                    sh 'npm run test -- --browsers=ChromeHeadless --watch=false'
                }
            }
            post {
                always {
                    junit 'Frontend/test-results/karma-results.xml'
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    dir('Frontend') {
                        sh '''
                        sonar-scanner \
                        -Dsonar.projectKey=charity-frontend \
                        -Dsonar.projectName='Charity Frontend' \
                        -Dsonar.host.url=${SONAR_HOST} \
                        -Dsonar.sources=src \
                        -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts \
                        -Dsonar.tests=src \
                        -Dsonar.test.inclusions=**/*.spec.ts \
                        -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
                        '''
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('Frontend') {
                    sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                    sh 'docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest'
                }
            }
        }
        
        stage('Deploy') {
            steps {
                dir('Frontend') {
                    sh 'docker-compose down frontend || true'
                    sh 'docker-compose up -d frontend'
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Frontend build completed successfully!'
        }
        failure {
            echo 'Frontend build failed!'
        }
    }
} 